{"version":3,"file":"index.js","sources":["../../main.js"],"sourcesContent":["import './style.scss';\r\n\r\nconst body = document.querySelector('body');\r\n\r\n// import MenuBar from '@layout/MenuBar/MenuBar';\r\n// import MenuBarTemplate from '@layout/MenuBar/MenuBar.html?raw';\r\n// import '@layout/MenuBar/MenuBar.scss';\r\n// body.insertAdjacentHTML('afterbegin', MenuBarTemplate);\r\n// MenuBar.run();\r\n\r\n\r\n// import MenuBar from '@layout/MenuBar-2/MenuBar';\r\n// import MenuBarTemplate from '@layout/MenuBar-2/MenuBar.html?raw';\r\n// import '@layout/MenuBar-2/MenuBar.scss';\r\n// body.insertAdjacentHTML('afterbegin', MenuBarTemplate);\r\n// MenuBar.run();\r\n\r\n// document.addEventListener('DOMContentLoaded', () => {\r\n\r\n//     const sections = document.querySelectorAll('section');\r\n//     const menuLinks = document.querySelectorAll('#menu a');\r\n\r\n//     const elements = {\r\n//         options: menuLinks,\r\n//         sections\r\n//     };\r\n\r\n//     if ('IntersectionObserver' in window) {\r\n//         setupIntersectionObserver(menuLinks, sections);\r\n//     } else {\r\n//         setupScrollListener(menuLinks, sections);\r\n//     }\r\n// });\r\n\r\n// const handleSmoothScroll = (event, link)  => {\r\n//     event.preventDefault();\r\n//     const targetId = link.getAttribute('href').substring(1);\r\n//     const targetSection = document.getElementById(targetId);\r\n\r\n//     window.scrollTo({\r\n//         top: targetSection.offsetTop,\r\n//         behavior: 'smooth'\r\n//     });\r\n// }\r\n\r\n// script.js\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const sections = document.querySelectorAll('section');\r\n    const menuLinks = document.querySelectorAll('#menu a');\r\n\r\n    getCurrentSection(sections, ( data ) => {\r\n\r\n        const { active, section } = data;\r\n        const sectionName  = section.getAttribute('id');\r\n        const optionMenu = document.querySelector(`#menu li[id = ${sectionName}]`);\r\n\r\n        if( active ) {\r\n            optionMenu.classList.add('active');\r\n\r\n        } else {\r\n            optionMenu.classList.remove('active');\r\n        }\r\n    });\r\n\r\n});\r\n\r\nconst getCurrentSection = ( sections, callback ) => {\r\n\r\n    // const config = {\r\n    //     root: null,\r\n    //     rootMargin: \"0px\",\r\n    //     threshold: 0.5\r\n    // }\r\n    // getSectionWithIntersectionAPI(config, sections, callback);\r\n  \r\n    getSectionWithListeners(sections, callback);\r\n}\r\n\r\n\r\nconst getSectionWithListeners = ( sections, callback) => { \r\n\r\n    const events =  ['load', 'scroll','resize'];\r\n\r\n    multiListenWindowEvents(events, (e) => {\r\n\r\n\r\n        const elementParent = document.querySelector('main');\r\n        const sections = document.querySelectorAll('section');\r\n\r\n        const stylesElementParent = window.getComputedStyle(elementParent);\r\n        const marginTopElementParent =  Math.round(parseFloat(stylesElementParent.marginTop));\r\n        const marginBottomElementParent = Math.round(parseFloat(stylesElementParent.marginBottom));\r\n\r\n        /**\r\n         *  Determine percent Height viewport for detect section\r\n         */\r\n        const detectSectionPercentage = 0.3;\r\n\r\n        const detectSectionPixels = (detectSectionPercentage * window.innerHeight );\r\n\r\n        const currentScrollY =  (window.scrollY + detectSectionPixels) - marginTopElementParent;\r\n\r\n        sections.forEach((section, index) => {\r\n\r\n            let topSection = section.offsetTop;\r\n\r\n            let boundTopSection = topSection;\r\n            let boundBottomSection = topSection + section.offsetHeight;\r\n           \r\n            // first element logic when the parent have margin top\r\n            if ( index === 0) {\r\n                const firstBoundTopSection =  boundTopSection - marginTopElementParent;\r\n                boundTopSection = firstBoundTopSection;\r\n            }\r\n\r\n            // last element logic when the parent have margin bottom\r\n            if( sections.length - 1 === index) {\r\n                const lastBoundBottomSection = boundBottomSection + marginBottomElementParent;\r\n                boundBottomSection = lastBoundBottomSection;\r\n            }\r\n\r\n            const isIntersecting = currentScrollY >= boundTopSection\r\n                                && currentScrollY < boundBottomSection;\r\n\r\n            callback({ \r\n                    active: isIntersecting,\r\n                    section\r\n                });\r\n        });\r\n\r\n    });\r\n};\r\n\r\nconst getSectionWithIntersectionAPI = (config, elements, callback ) => {\r\n\r\n    const observer = new IntersectionObserver( ([entry]) => {\r\n            if (entry.isIntersecting) {\r\n                callback(entry);\r\n            }\r\n    }, config);\r\n    \r\n    elements.forEach(section => {\r\n        observer.observe(section);\r\n    });\r\n};\r\n\r\nconst multiListenWindowEvents = (eventsListener, callback) => {\r\n    eventsListener.forEach( eventListener => {\r\n        window.addEventListener( eventListener, callback);\r\n    });\r\n};\r\n\r\nlet lastScroll = 0;\r\n\r\n/**\r\n * Determine the scroll direction.\r\n * @returns {boolean} - Returns `true` if scrolling down, `false` if scrolling up.\r\n */\r\nconst getDirectionScroll = () => {\r\n    const currentScroll = document.documentElement.scrollTop || document.body.scrollTop;\r\n\r\n    const isScrollingDown = currentScroll > lastScroll;\r\n    lastScroll = currentScroll;\r\n\r\n    return isScrollingDown;\r\n};\r\n\r\ndocument.querySelector('#active').addEventListener('click', () => {\r\n\r\n    const y = 3069;\r\n    window.scrollTo({\r\n        top: y,\r\n        behavior: 'smooth'\r\n    });\r\n})\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["sections","getCurrentSection","data","active","section","sectionName","optionMenu","callback","getSectionWithListeners","multiListenWindowEvents","e","elementParent","stylesElementParent","marginTopElementParent","marginBottomElementParent","detectSectionPixels","currentScrollY","index","topSection","boundTopSection","boundBottomSection","isIntersecting","eventsListener","eventListener"],"mappings":"ssBAEa,SAAS,cAAc,MAAM,EA6C1C,SAAS,iBAAiB,mBAAoB,IAAM,CAEhD,MAAMA,EAAW,SAAS,iBAAiB,SAAS,EAClC,SAAS,iBAAiB,SAAS,EAErDC,EAAkBD,EAAYE,GAAU,CAEpC,KAAM,CAAE,OAAAC,EAAQ,QAAAC,CAAS,EAAGF,EACtBG,EAAeD,EAAQ,aAAa,IAAI,EACxCE,EAAa,SAAS,cAAc,iBAAiBD,IAAc,EAErEF,EACAG,EAAW,UAAU,IAAI,QAAQ,EAGjCA,EAAW,UAAU,OAAO,QAAQ,CAEhD,CAAK,CAEL,CAAC,EAED,MAAML,EAAoB,CAAED,EAAUO,IAAc,CAShDC,EAAwBR,EAAUO,CAAQ,CAC9C,EAGMC,EAA0B,CAAER,EAAUO,IAAa,CAIrDE,EAFgB,CAAC,OAAQ,SAAS,QAAQ,EAETC,GAAM,CAGnC,MAAMC,EAAgB,SAAS,cAAc,MAAM,EAC7CX,EAAW,SAAS,iBAAiB,SAAS,EAE9CY,EAAsB,OAAO,iBAAiBD,CAAa,EAC3DE,EAA0B,KAAK,MAAM,WAAWD,EAAoB,SAAS,CAAC,EAC9EE,EAA4B,KAAK,MAAM,WAAWF,EAAoB,YAAY,CAAC,EAOnFG,EAF0B,GAEuB,OAAO,YAExDC,EAAmB,OAAO,QAAUD,EAAuBF,EAEjEb,EAAS,QAAQ,CAACI,EAASa,IAAU,CAEjC,IAAIC,EAAad,EAAQ,UAErBe,EAAkBD,EAClBE,EAAqBF,EAAad,EAAQ,aAGzCa,IAAU,IAEXE,EAD8BA,EAAkBN,GAKhDb,EAAS,OAAS,IAAMiB,IAExBG,EAD+BA,EAAqBN,GAIxD,MAAMO,EAAiBL,GAAkBG,GAClBH,EAAiBI,EAExCb,EAAS,CACD,OAAQc,EACR,QAAAjB,CACpB,CAAiB,CACjB,CAAS,CAET,CAAK,CACL,EAeMK,EAA0B,CAACa,EAAgBf,IAAa,CAC1De,EAAe,QAASC,GAAiB,CACrC,OAAO,iBAAkBA,EAAehB,CAAQ,CACxD,CAAK,CACL,EAiBA,SAAS,cAAc,SAAS,EAAE,iBAAiB,QAAS,IAAM,CAG9D,OAAO,SAAS,CACZ,IAAK,KACL,SAAU,QAClB,CAAK,CACL,CAAC"}